#ifndef OOP_KEYTYPE_H
#define OOP_KEYTYPE_H

#include <vector>
#include <iostream>
#include <cmath>
#include <limits>


typedef unsigned long keyInteger;

class KeyType {

public:
    keyInteger key;
    int maxLevel;

    KeyType();

    int getMaxLevel();

    friend std::ostream &operator<<(std::ostream &os, const KeyType &key2print);

};

std::ostream &operator<<(std::ostream &os, const KeyType &key2print);

/* Implementation for an arbitrary amount of levels
//always use unsigned
typedef unsigned int standardType;
typedef unsigned int extensionType;

class KeyType {

public:
    int sizeOfStandardType;
    int sizeOfExtensionType;
    int standardOverhead;
    int extensionOverhead;
    standardType maxStandard;
    extensionType maxExtension;
    void getTypeSizes();

    bool extended;

    standardType keyStandard;
    std::vector<extensionType> keyExtension;

public:
    KeyType();
    template<typename I>KeyType(I key);

    int getMaxLevel() const;

    friend std::ostream &operator << (std::ostream &os, const KeyType &key);
};

template<typename I>KeyType::KeyType(I key) {
    getTypeSizes();
    if (sizeof(key)*CHAR_BIT <= sizeOfStandardType) {
        keyStandard = (standardType)key & maxStandard;
    }
    else {
        keyStandard = key & maxStandard;
        key = key >> (sizeOfStandardType - standardOverhead);
        if (key > 0) {
            extended = true;
        }
        while(key > 0) {
            std::cout << "Inserting: " << (extensionType)(key & maxExtension) << std::endl;
            keyExtension.push_back((extensionType)(key & maxExtension));
            key = key >> (sizeOfExtensionType - extensionOverhead);
            std::cout << "Key: " << key << std::endl;
        }
    }
}

std::ostream &operator<<(std::ostream &os, const KeyType &key);
*/

#endif //OOP_KEYTYPE_H
