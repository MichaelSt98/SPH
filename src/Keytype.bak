#include "../include/Keytype.h"

KeyType::KeyType() {
    key = (keyInteger)0;
    maxLevel = getMaxLevel();
}

int KeyType::getMaxLevel() {
    return (int)(sizeof(keyInteger)*CHAR_BIT/3);
}

std::ostream &operator<<(std::ostream &os, const KeyType &key2print) {
    //int levels[maxLevel];
    std::cout << "This is a Test!" << std::endl;
    os << "test";
    return os;
}


/*
KeyType::KeyType() {
    getTypeSizes();
    keyStandard = 0UL;
    extended = false;
}


void KeyType::getTypeSizes() {
    sizeOfStandardType = sizeof(standardType)*CHAR_BIT;
    sizeOfExtensionType = sizeof(extensionType)*CHAR_BIT;
    standardOverhead = sizeOfStandardType % 3;
    extensionOverhead = sizeOfExtensionType % 3;
    maxStandard = std::numeric_limits<standardType>::max() >> standardOverhead; // - (standardOverhead << (sizeOfStandardType-1));
    //std::cout << "maxStandard: " << maxStandard << std::endl;

    maxExtension = std::numeric_limits<extensionType>::max() >> extensionOverhead; // - (extensionOverhead << (sizeOfExtensionType-1));
    //std::cout << "maxExtension: " << maxExtension << std::endl;

}

std::ostream &operator<<(std::ostream &os, const KeyType &key)
{
    int level = key.getMaxLevel();
    int levels[level];

    int keyPart = 0;
    int keyExtendedIndex = 0;
    int j = 0;

    for (int i = 0; i<level; i++) {
        if (i < (key.sizeOfStandardType-key.standardOverhead)/3) {
            //std::cout << "i = " << i << std::endl;
            keyPart = key.keyStandard >> (key.sizeOfStandardType - 3*(i + 1) - key.standardOverhead) & (int)7;
            //levels[i] = keyPart;
        }
        else {
            if (key.extended) {
                if (j > (key.sizeOfExtensionType-key.extensionOverhead)) {
                    j = 0;
                    keyExtendedIndex++;
                }
                keyPart = key.keyExtension[keyExtendedIndex]
                                  >> (key.sizeOfExtensionType - 3 * (j + 1) - key.extensionOverhead) & (int)7;
                j++;
                //levels[i] = keyPart;
            }
        }
        levels[i] = keyPart;
        keyPart = -1;
    }

    for (int i = 0; i<level; i++) {
        os << std::to_string(levels[i]);
        os <<  "|";
    }
    return os;
}

int KeyType::getMaxLevel() const {
    if (extended) {
        int standardMaxLevel = (sizeOfStandardType-1)/3;
        //std::cout << "keyExtension.size(): " << keyExtension.size() << std::endl;
        int extensionLevels = (keyExtension.size()*sizeOfExtensionType-1)/3;
        return standardMaxLevel + extensionLevels;
    }
    else {
        return (sizeOfStandardType-1)/3;
    }
}
*/